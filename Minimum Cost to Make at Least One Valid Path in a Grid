class Solution:
   def minCost(self, grid: List[List[int]]) -> int:
       minHeap = [(0, 0, 0)]
       heapq.heapify(minHeap)
       visited = set()
       directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] #index 2 and 3 should be swapped according to descriptIon
       
       while minHeap:
           cost, row, col = heapq.heappop(minHeap)
           
           if (row, col) in visited:
               continue
           
           visited.add((row, col))
           
           if row == len(grid) - 1 and col == len(grid[0]) - 1:
               return cost
           
           for i in range(len(directions)):
               new_row, new_col = row + directions[i][0], col + directions[i][1]
               
               if (0 <= new_row < len(grid) and 0 <= new_col < len(grid[0])):
                   new_cost = cost
                   if i + 1 != grid[row][col]: 
                       new_cost += 1
                   heapq.heappush(minHeap, (new_cost, new_row, new_col))
